package {app_pkg}.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import {app_pkg}.bases.PageReq;
import {app_pkg}.config.i18n.Messages;
import {app_pkg}.config.i18n.ServiceException;
import {app_pkg}.model.{model_name};
import {app_pkg}.repository.{model_name}Repository;
import {app_pkg}.util.SearchUtils;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class {model_name}Service {

	private final {model_name}Repository repository;

	public Page<{model_name}> findAll(PageReq query) {
		Specification<{model_name}> deleted = SearchUtils.specByDeleted(query.isDeleted());
		Specification<{model_name}> filters = SearchUtils.specByFilter(query.getFilter(){columns});
		return this.repository.findAll(deleted.and(filters), query.toPageRequest());
	}

	public {model_name} findById({id_type} id) {
		return this.repository.findById(id).orElseThrow(() -> new ServiceException(Messages.record_not_found));
	}

	public {model_name} save({model_name} pojo) {
		return this.findById(this.repository.save(pojo).getId());
	}

	public void logicalExclusion({id_type} id) {
		if (!this.repository.findById(id).isPresent())
			throw new ServiceException(Messages.record_not_found);
		this.repository.softDelete(id);
	}

	public List<{model_name}> findAll() {
		return this.repository.findAll();
	}

	public List<{model_name}> findAllDeleted() {
		return this.repository.findAllDeleted();
	}

	public void restoreDeleted({id_type} id) {
		if (!this.repository.findDeletedById(id).isPresent())
			throw new ServiceException(Messages.record_not_found_at_recycle_bin);
		this.repository.restoreDeleted(id);
	}

	public void permanentDestroy({id_type} id) {
		if (!this.repository.findDeletedById(id).isPresent())
			throw new ServiceException(Messages.record_not_found_at_recycle_bin);
		this.repository.deleteById(id);
	}
	
	public List<{model_name}> findByIds({id_type}[] ids) {
		return this.repository.findAllById(Arrays.asList(ids));
	}
}
